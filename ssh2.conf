input {
 file {
 path => [ "/var/log/auth.log" ]
 type => "syslog"

 }
}



filter {
  
	grok {
	    match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
	    overwrite => [ "message" ]
	}
	date {
	    locale => "en"
	    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"  ]
	    timezone => "Europe/Berlin"
	}


	if [message] =~ /^pam_/ {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/etc/logstash/patterns.d}"
		match => { "message" => "%{PAM}" }
		add_tag => [ "_grok_pam_success" ]
	    }
	    if [pam_kvdata] {
		mutate {
		    gsub => [ "pam_kvdata", "= ", '=- ' ]
		}
		kv {
		    source => "pam_kvdata"
		    prefix => "pam_"
		}
		mutate {
		    remove_field => [ "pam_kvdata" ]
		}
	    }
	}

	
	if [program] == "sshd" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/etc/logstash/patterns.d}"
		match => { "message" => "%{SSH_AUTHFAIL_WRONGCREDS}" }
		add_field => { "ssh_authresult" => "fail" "ssh_failreason" => "wrong_credentials" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/etc/logstash/patterns.d}"
		match => { "message" => "%{SSH_AUTHFAIL_WRONGUSER}" }
		add_field => { "ssh_authresult" => "fail" "ssh_failreason" => "unknown_user" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/etc/logstash/patterns.d}"
		match => { "message" => "%{SSH_AUTH_SUCCESS}" }
		add_field => { "ssh_authresult" => "success" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/etc/logstash/patterns.d}"
		match => { "message" => "%{SSH_DISCONNECT}" }
		add_tag => [ "_grok_sshd_success", "matched", "ssh_disconnect" ]
	    }
	    mutate {
		remove_tag => [ "matched", "_grokparsefailure" ]
	    }
	    geoip {
		source => "ssh_client_ip"
	    }
	}

	
    
}

output {
 

 if [program] == "sshd"{
 elasticsearch {
	hosts => [ "${LL_ES_HOST:127.0.0.1}" ]
	index => "ssh-%{type}-%{+YYYY.MM}"
		document_type => "%{[@metadata][type]}" 

    }



stdout { codec => rubydebug }
    
    }
}
